{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  users: [],\n  selectedUser: null,\n  isLoading: false\n};\nconst userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    setUsers(state, action) {\n      state.users = action.payload;\n      state.isLoading = false;\n    },\n    setSelectedUser(state, action) {\n      state.selectedUser = action.payload;\n    },\n    updateUserData(state, action) {\n      const {\n        userId,\n        updatedFields\n      } = action.payload;\n      const handleSaveData = async (userId, updatedFields) => {\n        try {\n          const response = await fetch(`https://legendary-barnacle-9rq6jr9pg7qcx4x4-3001.app.github.dev/api/users/${userId}`, {\n            method: 'PATCH',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(updatedFields)\n          });\n          const data = await response.json();\n          console.log('User data updated:', data);\n\n          // Update the user data in the users array\n          const updatedUsers = users.map(user => {\n            if (user.id === userId) {\n              return {\n                ...user,\n                ...updatedFields\n              };\n            }\n            return user;\n          });\n          dispatch(setUsers(updatedUsers));\n        } catch (error) {\n          console.error('Error updating user data:', error);\n        }\n      };\n    },\n    setIsLoading(state, action) {\n      state.isLoading = action.payload;\n    }\n  }\n});\nexport const {\n  setUsers,\n  setSelectedUser,\n  updateUserData,\n  setIsLoading\n} = userSlice.actions;\nexport default userSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","users","selectedUser","isLoading","userSlice","name","reducers","setUsers","state","action","payload","setSelectedUser","updateUserData","userId","updatedFields","handleSaveData","response","fetch","method","headers","body","JSON","stringify","data","json","console","log","updatedUsers","map","user","id","dispatch","error","setIsLoading","actions","reducer"],"sources":["/workspaces/infinite_synergy/frontend/src/redux/reducers/userReducer.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n    users: [],\n    selectedUser: null,\n    isLoading: false,\n};\n\nconst userSlice = createSlice({\n    name: 'user',\n    initialState,\n    reducers: {\n        setUsers(state, action) {\n            state.users = action.payload;\n            state.isLoading = false;\n        },\n        setSelectedUser(state, action) {\n            state.selectedUser = action.payload;\n        },\n        updateUserData(state, action) {\n            const { userId, updatedFields } = action.payload;\n\n            const handleSaveData = async (userId, updatedFields) => {\n                try {\n                  const response = await fetch(`https://legendary-barnacle-9rq6jr9pg7qcx4x4-3001.app.github.dev/api/users/${userId}`, {\n                    method: 'PATCH',\n                    headers: {\n                      'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify(updatedFields),\n                  });\n                  const data = await response.json();\n                  console.log('User data updated:', data);\n                  \n                  // Update the user data in the users array\n                  const updatedUsers = users.map(user => {\n                    if (user.id === userId) {\n                      return { ...user, ...updatedFields };\n                    }\n                    return user;\n                  });\n                  dispatch(setUsers(updatedUsers));\n                } catch (error) {\n                  console.error('Error updating user data:', error);\n                }\n              };  \n        },\n        setIsLoading(state, action) {\n            state.isLoading = action.payload;\n        }\n    },\n});\n\nexport const { setUsers, setSelectedUser, updateUserData, setIsLoading } = userSlice.actions;\nexport default userSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,YAAY,GAAG;EACjBC,KAAK,EAAE,EAAE;EACTC,YAAY,EAAE,IAAI;EAClBC,SAAS,EAAE;AACf,CAAC;AAED,MAAMC,SAAS,GAAGL,WAAW,CAAC;EAC1BM,IAAI,EAAE,MAAM;EACZL,YAAY;EACZM,QAAQ,EAAE;IACNC,QAAQA,CAACC,KAAK,EAAEC,MAAM,EAAE;MACpBD,KAAK,CAACP,KAAK,GAAGQ,MAAM,CAACC,OAAO;MAC5BF,KAAK,CAACL,SAAS,GAAG,KAAK;IAC3B,CAAC;IACDQ,eAAeA,CAACH,KAAK,EAAEC,MAAM,EAAE;MAC3BD,KAAK,CAACN,YAAY,GAAGO,MAAM,CAACC,OAAO;IACvC,CAAC;IACDE,cAAcA,CAACJ,KAAK,EAAEC,MAAM,EAAE;MAC1B,MAAM;QAAEI,MAAM;QAAEC;MAAc,CAAC,GAAGL,MAAM,CAACC,OAAO;MAEhD,MAAMK,cAAc,GAAG,MAAAA,CAAOF,MAAM,EAAEC,aAAa,KAAK;QACpD,IAAI;UACF,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAE,6EAA4EJ,MAAO,EAAC,EAAE;YAClHK,MAAM,EAAE,OAAO;YACfC,OAAO,EAAE;cACP,cAAc,EAAE;YAClB,CAAC;YACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACR,aAAa;UACpC,CAAC,CAAC;UACF,MAAMS,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;UAClCC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEH,IAAI,CAAC;;UAEvC;UACA,MAAMI,YAAY,GAAG1B,KAAK,CAAC2B,GAAG,CAACC,IAAI,IAAI;YACrC,IAAIA,IAAI,CAACC,EAAE,KAAKjB,MAAM,EAAE;cACtB,OAAO;gBAAE,GAAGgB,IAAI;gBAAE,GAAGf;cAAc,CAAC;YACtC;YACA,OAAOe,IAAI;UACb,CAAC,CAAC;UACFE,QAAQ,CAACxB,QAAQ,CAACoB,YAAY,CAAC,CAAC;QAClC,CAAC,CAAC,OAAOK,KAAK,EAAE;UACdP,OAAO,CAACO,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;QACnD;MACF,CAAC;IACP,CAAC;IACDC,YAAYA,CAACzB,KAAK,EAAEC,MAAM,EAAE;MACxBD,KAAK,CAACL,SAAS,GAAGM,MAAM,CAACC,OAAO;IACpC;EACJ;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEH,QAAQ;EAAEI,eAAe;EAAEC,cAAc;EAAEqB;AAAa,CAAC,GAAG7B,SAAS,CAAC8B,OAAO;AAC5F,eAAe9B,SAAS,CAAC+B,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}